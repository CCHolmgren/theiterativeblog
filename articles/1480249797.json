{"title":"Welcome to the 21st century!","published":"2016-11-27 12:21","changes":"huge","write_time":"8 minutes","content":"<p>Now I have reworked a lot of the code, structured it, and made it over all better.<\/p>\r\n<h3>List of features:<\/h3>\r\n<ul>\r\n    <li>Classes instead of just global methods. Welcome to the 21st century. This replaces a lot of the global functions that were used previously. Some are still left, but I will probably work those out of the code sometime in the future.<\/li>\r\n    <li>Autoloading. Instead of the abyssmal includes all over the place in standard php code (I'm looking at you wordpress), I am now using autoloading for all classes.<\/li>\r\n    <li>Login is now possible. There is just one hardcoded user, but it works. Instead of the post form always being visible, it is not hidden behind a login form. This means that the ui is a little cleaner, without that post form always being at the top of the page. Maybe I will even hide the login form behind some other url?<\/li>\r\n    <li>Routing. Posting the post form does not post it to <code>\/<\/code>, instead it posts it to <code>\/new-article<\/code>, which does the handling. The routing is very basic, but it does what it is supposed to do so far (and if I need more advanced features I will replace it when it comes to that).<\/li>\r\n<\/ul>\r\n<p>Over all this is a good step in the right direction to having a more managable code base. It might be tiny, but every code base can very easily explode into a very large and unmanagable one if you just let it happen without some kind of design behind it.<\/p>\r\n<p>TLDR: Better, more modern, code. Large changes, not much visible.<\/p>","name":1480249797}
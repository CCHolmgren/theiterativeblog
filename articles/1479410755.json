{"title":"First feature, done, and done!!","published":"2016-11-17 20:25","changes":"huge","write_time":"50 minutes","content":"<p>Now this is what I was talking about. In the header of the page, there is a form. This form posts new articles. The form is password protected so you need to know the password, which is stored in a hashed format in the .password file.<\/p>\r\n\t\t<p>Articles are no longer hardcoded into the markup of the base index.php file. Instead they are loaded from a articles folder, and all data about the content is encoded as a json object. This way allows for adding of fields with ease, just change the object, and it will work. With the help of a <code>get<\/code> helper, a default value can be used instead of the content of the key if it is missing. As such potential changes to the article objects will not be that big of an impact.<\/p>\r\n\t\t<p>So what does this mean for this blog then? It means that I can much mroe easily write new articles without having to open up my editor all of the time. However, I do find it quite annoying to not have the help of the editor to help me write the actual markup, maybe I will add a feature to auto paragraph text, or something like that? Who knows what the future will hold?<\/p>\r\n\t\t<p><b>A feature that I intend to add very soon<\/b>: if you try to visit the \/articles\/ directory, located in the same directory as this index.php, you will find that nginx complains, and gives you a 403. What I would like for it to do is hand over access to some kind of error handler instead, and not let it slip that \/articles\/ even exists. <\/p>\r\n\t\t<p>This is because it will first try to access real files and folders before it passes the request on to the index.php file. This is all fine and dandy as long as you have no files or folders in the same directory as the file, but that would make it quite hard to continue to develop the page. So what you can do is have a \/public\/ directory, with all things that everyone should be able to access, where you also place the index.php file. In the directory above that, you place all files that you do not want the public to have access too. It creates a much better way of handling public\/private than, say, Wordpress.<\/p>","name":"1479410755"}
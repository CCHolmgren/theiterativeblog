{"title":"Changes, changes all over!","published":"2016-11-29 21:53","changes":"huge","write_time":"19 minutes","markdown":"This time, there are some really large changes done to the page. Maybe even a little to much has changed?\r\n\r\n### Templating via Twig\r\nFirst and foremost, the page is now using [Twig](http:\/\/twig.sensiolabs.org\/) as it's templating language. I really tried to implement something simple myself, but that turned out to be really difficult to actually do. Instead of a simple solution it turned into a very convoluted one, that didn't solve the main problem that I had with the previous way that I handled templates. \r\n\r\nI wanted to avoid the awful Wordpress-like templates, where you do something like this:\r\n```\r\ninclude(\"header.php\");\r\n\r\n\/\/ content\r\n\r\ninclude(\"footer.php\");\r\n```\r\n\r\n**Why do I think that way of handling it is awful?** Because it makes reuse very, very difficult. Say I want to use a template, like the `base.html` template that this is using right now, and I want to replace the header. How would you do that with the Wordpress-like templating? I don't really know. There are so many ways to do it, and all of them become hard to read, hard to change and overall bad.\r\n\r\nThe benefit of using a proper templating language such as Twig is that you can very easily reuse a template, as many times as you want, you can replace separate blocks, independent of every other block. It also forces you to not place code in the template, you must use the tags, filters and functions that Twig includes, you provide your own. This makes the templates easier to reuse, cleaner, and just better in my opinion.\r\n\r\n### Deleting articles\r\nIt is now possible to delete an article, as easily as it is to edit it. Click on the delete link, click on the button on the page that loads, and you are done. Having a way to add articles and even edit them, but not delete them was a little bit odd, since I had to manually delete the files.\r\n\r\n### Markdown\r\nInstead of manually writing this article with the html that is needed, it is being generate using [showdown.js](https:\/\/github.com\/showdownjs\/showdown). I have a live preview below the textarea where I am writing this, and I also have a raw html textarea in which I can see the generated html directly. So all new articles will be written using markdown instead of raw html. Nicer, less error prone, faster.\r\n\r\n### 404s\r\nThe routing now gives you a 404 page instead of the default `\/` page if you visit a url that isn't defined in the routes. The reason why it didn't before? Because it was easier not to, plain and simple. \r\n\r\nThere might be other things that isn't listed here, but the main changes are listed above. My goal is still to prove as good of a user experience as possible, for the reader and for me. I did include Twig, which is a lot of code compared to the code that I have written, but considering that I didn't have to implement it myself and it being a really good library, I think it was well deserved. It shouldn't really affect speed in any way, so it doesn't affect my main goal, even if it is a small defeat to use someone elses code so soon.","content":"<p>This time, there are some really large changes done to the page. Maybe even a little to much has changed?<\/p>\r\n<h3 id=\"templatingviatwig\">Templating via Twig<\/h3>\r\n<p>First and foremost, the page is now using <a href=\"http:\/\/twig.sensiolabs.org\/\">Twig<\/a> as it's templating language. I really tried to implement something simple myself, but that turned out to be really difficult to actually do. Instead of a simple solution it turned into a very convoluted one, that didn't solve the main problem that I had with the previous way that I handled templates. <\/p>\r\n<p>I wanted to avoid the awful Wordpress-like templates, where you do something like this:<\/p>\r\n<pre><code>include(\"header.php\");\r\n\r\n\/\/ content\r\n\r\ninclude(\"footer.php\");\r\n<\/code><\/pre>\r\n<p><strong>Why do I think that way of handling it is awful?<\/strong> Because it makes reuse very, very difficult. Say I want to use a template, like the <code>base.html<\/code> template that this is using right now, and I want to replace the header. How would you do that with the Wordpress-like templating? I don't really know. There are so many ways to do it, and all of them become hard to read, hard to change and overall bad.<\/p>\r\n<p>The benefit of using a proper templating language such as Twig is that you can very easily reuse a template, as many times as you want, you can replace separate blocks, independent of every other block. It also forces you to not place code in the template, you must use the tags, filters and functions that Twig includes, you provide your own. This makes the templates easier to reuse, cleaner, and just better in my opinion.<\/p>\r\n<h3 id=\"deletingarticles\">Deleting articles<\/h3>\r\n<p>It is now possible to delete an article, as easily as it is to edit it. Click on the delete link, click on the button on the page that loads, and you are done. Having a way to add articles and even edit them, but not delete them was a little bit odd, since I had to manually delete the files.<\/p>\r\n<h3 id=\"markdown\">Markdown<\/h3>\r\n<p>Instead of manually writing this article with the html that is needed, it is being generate using <a href=\"https:\/\/github.com\/showdownjs\/showdown\">showdown.js<\/a>. I have a live preview below the textarea where I am writing this, and I also have a raw html textarea in which I can see the generated html directly. So all new articles will be written using markdown instead of raw html. Nicer, less error prone, faster.<\/p>\r\n<h3 id=\"404s\">404s<\/h3>\r\n<p>The routing now gives you a 404 page instead of the default <code>\/<\/code> page if you visit a url that isn't defined in the routes. The reason why it didn't before? Because it was easier not to, plain and simple. <\/p>\r\n<p>There might be other things that isn't listed here, but the main changes are listed above. My goal is still to prove as good of a user experience as possible, for the reader and for me. I did include Twig, which is a lot of code compared to the code that I have written, but considering that I didn't have to implement it myself and it being a really good library, I think it was well deserved. It shouldn't really affect speed in any way, so it doesn't affect my main goal, even if it is a small defeat to use someone elses code so soon.<\/p>","name":1480457535}
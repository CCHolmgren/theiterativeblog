{"title":"First real feature \u2013 considerations","published":"2016-11-17 18:36","changes":"none","write_time":"54 minutes","content":"<p>\r\n\t\t\t\tSo far I have only written static html inside the base index.php file. \r\n\t\t\t\tIn the beginning writing the static html is fine, since it just means that there is no overhead at all. \r\n\t\t\t\tBut as time moves on this will not be feasible, and will prevent me from implementing all types of features that might come in handy, such as a way to actually write an article without having to edit this file every single time, or editing the templates of the articles without having to manually edit them, one by one.<\/p>\r\n\t\t\t<p>\r\n\t\t\t\tThis is the time where I will consider how to implement the \"write article\" feature. What I want to have is a feature that is as simple as possible, that won't mean that I will have to change a lot of features in the future.\r\n\t\t\t<\/p>\r\n\t\t\t<p>Some different ways that you might do it is:<\/p>\r\n\t\t\t<dl>\r\n\t\t\t\t<dt>Storing the articles in a SQL database<\/dt>\r\n\t\t\t\t<dd>Whilst this probably is the destination that I will arrive at, sometime, I do not feel that it is necessary at this time. Having a database means that you need to actually have a database running (or use SQLite) and that requires a schema, having a database connection in the code, and actually writing SQL. Since I am a fan of the active record paradigm, I will probably use that sometime in the future, but at this moment this is just way to over engineered to be any useful for me.<\/dd>\r\n\r\n\t\t\t\t<dt>Storing the articles in some other database<\/dt>\r\n\t\t\t\t<dd>Like with the SQL database this is also too complicated for what I will be using it for. It also requires some kind of daemon running in the background, which is wholly unnecessary if I'm just going to store articles in them.<\/dd>\r\n\r\n\t\t\t\t<dt>Loading the articles from separate files<\/dt>\r\n\t\t\t\t<dd>Separate files feels way more compelling when compared to storing them in a database. This way it is very easy to add a new article, just create a new file in a folder somewhere, and it instantly gets rendered to the screen with all other articles. What I can see as a problem with this approach is that, how do you store data about the article, such as title, published date, changes since last article, and how long it took to write? If I am going to separate template and content from eachother, how will I map it out? On way would be to differentiate it based on lines, line 1 corresponds to the title and so on. That will however, bring a major problem if I every decide that I want to change something, like add an extra field, since old files will have to be edited for the lines to not be mixed up. Another way could be to store the content in a json object, so that it is as simple as <code>json_decode<\/code> to get the values that I need. This way I do not have to worry about ever adding a field.<\/dd>\r\n\r\n\t\t\t\t<dt>Loading the articles from a single file<\/dt>\r\n\t\t\t\t<dd>Piggybacking on the last line of the previous way, I could also store every article as a separate object in an json array. This means that everything is contained in a single file, and theoretically it could maybe be a little faster to do it this way than to use multiple files. However, the big problem I see with this is that it just doesn't feel like a nice solution. It is a very bad justification for not using this solution, but it is enough for me not to choose it at this time.<\/dd>\r\n\t\t\t<\/dl>\r\n\t\t\t\r\n\t\t\t<p>With that said, how will I actually implement the posting of articles?<\/p>\r\n\t\t\t<ol>\r\n\t\t\t\t<li>Add a form somewhere on the page, that is password protected of course.<\/li>\r\n\t\t\t\t<li>On post, the page will check that the password is correct (it will be a hardcoded password for now, stored in some .gitignored file), and then store the data from the form in a new file, with a json encoded object.<\/li>\r\n\t\t\t\t<li>Every time the page is rendered the page will fetch all articles and render them with a fixed template that is not bound to the article.<\/li>\r\n\t\t\t<\/ol>"}